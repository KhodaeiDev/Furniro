{
  "openapi": "3.0.0",
  "info": {
    "title": "< furniro - Shop APIS ‚ù§Ô∏èüíª >",
    "description": "",
    "version": "1.0.0"
  },

  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "User token for authentication: **Bearer [user_token]**"
      }
    }
  },

  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth üîê"],
        "summary": "For User Register",
        "description": "User rigister routes",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fullname": {
                    "type": "string",
                    "example": "mehranKhodaei"
                  },
                  "email": {
                    "type": "string",
                    "example": "khodaei.dev@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "@Mehran1212"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "@Mehran1212"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success Register User, (Returned AccessToken and RefreshToken)  and Saved Refreshtoken in Cookies",
            "content": {
              "application/json": {
                "example": {
                  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "AccessToken-expiresIn": "14 minute",
                  "refreshToken": "dcbdc-kjcjdsc-cjdc-sjjdsc",
                  "RefreshToken-expiresIn": "7 day",
                  "user": {
                    "_id": "37266829r8ucuef327",
                    "fullname": "mehran",
                    "role": "USER",
                    "email": "example@gmail.com",
                    "__v": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Email Already exist"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth üîê"],
        "summary": "For User Login",
        "description": "For User Login with email and paassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "khodaei.dev@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "@Mehran1212"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user logged in successfully ,(Returned AccessToken and refreshToken) and Saved Refreshtoken in Cookies",
            "content": {
              "application/json": {
                "example": {
                  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "AccessToken-expiresIn": "14 minute",
                  "refreshToken": "dcbdc-kjcjdsc-cjdc-sjjdsc",
                  "RefreshToken-expiresIn": "7 day",
                  "user": {
                    "_id": "37266829r8ucuef327",
                    "fullname": "mehran",
                    "role": "USER",
                    "email": "example@gmail.com",
                    "__v": 0
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid Data (Email Or Password)"
          }
        }
      }
    },

    "/auth/refresh": {
      "post": {
        "summary": "Get New Access Token",
        "description": "Retrieves a new access token using the refresh token stored in cookies.",
        "operationId": "getNewAccessToken",
        "tags": ["Auth üîê"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "example": "djhdi-dehdhi-ajeucm-alcsaxclamxj"
                  }
                },
                "required": ["refreshToken"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access and Refreshtoken generated successfully.",
            "content": {
              "application/json": {
                "example": {
                  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "AccessToken-expiresIn": "14 minute",
                  "refreshToken": "dcbdc-kjcjdsc-cjdc-sjjdsc",
                  "RefreshToken-expiresIn": "7 day"
                }
              }
            }
          },
          "401": {
            "description": "Refresh token not provided or invalid."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/auth/me": {
      "get": {
        "summary": "Get Authenticated User Information",
        "description": "Returns information about the currently authenticated user.",
        "tags": ["Auth üîê"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully.",
            "content": {
              "application/json": {
                "example": {
                  "user": {
                    "_id": "37266829r8ucuef327",
                    "fullname": "mehran",
                    "role": "USER",
                    "email": "example@gmail.com",
                    "__v": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token not found or invalid.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Unauthorized !! - token Not Found"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Token expired.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Unauthorized !! Token Expired"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "User Not found"
                }
              }
            }
          }
        }
      }
    },

    "/auth/getCode": {
      "post": {
        "summary": "Request Reset Password Code",
        "description": "Generates a reset password code and sends it to the provided email address.",
        "tags": ["Auth üîê"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "khodaei.dev@gmail.com"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password code sent successfully."
          },
          "404": {
            "description": "Email not valid."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/auth/verifyCode": {
      "post": {
        "summary": "Verify Reset Password Code",
        "description": "Verifies the reset password code sent to the user's email and generates a token if successful.",
        "tags": ["Auth üîê"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "khodaei.dev@gmail.com"
                  },
                  "code": {
                    "type": "string",
                    "example": "12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code verified successfully, returns a user token."
          },
          "400": {
            "description": "The entered code is not correct."
          },
          "403": {
            "description": "The code has expired, please request a new one."
          },
          "404": {
            "description": "Email not valid."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/auth/reset-password/{token}": {
      "post": {
        "summary": "Reset Password",
        "description": "Resets the user's password using a valid reset token.",
        "tags": ["Auth üîê"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "The reset password token.",
            "schema": {
              "type": "string",
              "example": "a1b2c3d4e5f6g7h8i9j0"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "example": "newStrongPassword123!"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "newStrongPassword123!"
                  }
                },
                "required": ["password", "confirmPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully."
          },
          "403": {
            "description": "Invalid token or User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/auth/log-out": {
      "post": {
        "summary": "User Logout",
        "description": "Logs out a user by deleting the provided refresh token.",
        "tags": ["Auth üîê"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Refresh token to be invalidated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "example": "your_refresh_token_here"
                  }
                },
                "required": ["refreshToken"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful logout"
          },
          "400": {
            "description": "refreshToken dont Receive from Body"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },

    "/category/": {
      "post": {
        "summary": "Create a new category",
        "description": "Creates a new category if the title or href does not already exist.",
        "tags": ["Admin Dashboard üìà"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "example": "sofas" },
                  "href": { "type": "string", "example": "sofas" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully."
          },
          "400": {
            "description": "Category title or href already exists."
          },
          "401": {
            "description": "Forbidden. Only admins can access this route"
          },
          "404": {
            "description": "User Not found - Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all categories",
        "description": "Returns a list of all categories.",
        "tags": ["Category üìÇ"],
        "responses": {
          "200": {
            "description": "List of categories retrieved successfully.",
            "content": {
              "application/json": {
                "example": {
                  "categories": [
                    {
                      "_id": "23dsfbgngrngnh446gnry6fh65",
                      "title": "test",
                      "href": "test"
                    },
                    {
                      "_id": "456287ds45236hg45",
                      "title": "test1",
                      "href": "test1"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No categories found."
          }
        }
      }
    },
    "/category/{categoryId}": {
      "delete": {
        "summary": "Remove a category",
        "description": "Deletes a category by its ID. Requires admin privileges.",
        "tags": ["Admin Dashboard üìà"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the category to delete",
            "schema": {
              "type": "string",
              "example": "60f7f0b8f1a2c3d4e5f67890"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Category removed successfully.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Category Removed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID format.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Category ObjectId not valid !!"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token not provided or invalid.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Unauthorized !! - token Not Found"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin privileges required.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Forbidden - Admin access required"
                }
              }
            }
          },
          "404": {
            "description": "Category Not Found!",
            "content": {
              "application/json": {
                "example": {
                  "message": "Category Not Found!"
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a category",
        "description": "Updates the title and href of a category by its ID. Requires admin privileges.",
        "tags": ["Admin Dashboard üìà"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the category to update",
            "schema": {
              "type": "string",
              "example": "60f7f0b8f1a2c3d4e5f67890"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Updated Category Title"
                  },
                  "href": {
                    "type": "string",
                    "example": "updated-category-url"
                  }
                },
                "required": ["title", "href"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Category Updated successfully",
                  "updateCategory": {
                    "_id": "60f7f0b8f1a2c3d4e5f67890",
                    "title": "Updated Category Title",
                    "href": "updated-category-url"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID format.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Category ObjectId not valid !!"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token not provided or invalid.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Unauthorized !! - token Not Found"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin privileges required.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Forbidden - Admin access required"
                }
              }
            }
          },
          "404": {
            "description": "Category not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Category Not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },

    "/newsletter/": {
      "post": {
        "summary": "Add email to newsletter list",
        "description": "Add a new email to the newsletter list if it doesn't already exist.",
        "tags": ["Newsletter üì∞"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "example@example.com"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email added to newsletter list successfully."
          },
          "403": {
            "description": "Email already exists in newsletter list."
          },
          "500": {
            "description": "Server error."
          }
        }
      },
      "get": {
        "summary": "Get all newsletter emails",
        "description": "Retrieve a list of all emails in the newsletter.",
        "tags": ["Admin Dashboard üìà"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of newsletter emails returned successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden. Only admins can access this route."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },

    "/concat/": {
      "post": {
        "summary": "Create a new contact message",
        "description": "Creates a new contact message with name, email, subject, and message. (Subject is a Optional Field)",
        "tags": ["Concat üì©"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "johndoe@example.com"
                  },
                  "subject": {
                    "type": "string",
                    "example": "Inquiry",
                    "required": false
                  },
                  "message": {
                    "type": "string",
                    "example": "I would like more information."
                  }
                },
                "required": ["name", "email", "message"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact message successfully sent.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Your Concat Message Sent"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request."
          },
          "500": {
            "description": "Server error."
          }
        }
      },
      "get": {
        "summary": "Retrieve all contact messages",
        "description": "Fetches all contact messages. Requires admin privileges.",
        "tags": ["Admin Dashboard üìà"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all contact messages.",
            "content": {
              "application/json": {
                "example": {
                  "concats": [
                    {
                      "name": "Jane Doe",
                      "email": "janedoe@example.com",
                      "subject": "Feedback",
                      "message": "Great service!"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access."
          },
          "403": {
            "description": "Forbidden. Admin privileges required."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    }
  }
}
